{"version":3,"sources":["ng://@protacon/ngx-resource-calendar/lib/resource-calendar.component.ts","ng://@protacon/ngx-resource-calendar/lib/ngx-resource-calendar.module.ts","ng://@protacon/ngx-resource-calendar/lib/models/day.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/event.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/hour.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/resource.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/slot.model.ts"],"names":["ResourceCalendarComponent","this","dates","events","slotDurationInMinutes","height","hourBorderHeight","hours","datesWithEvents","prototype","ngOnChanges","changes","currentValue","length","resources","setResourceEvents","_this","forEach","d","r","push","data","getEvents","resourceNumber","slots","time","day","endDate","Date","setDate","getDate","dayStart","getTime","dayEnd","filter","m","startTime","endTime","map","event","position","calculatePosition","calculateHeight","diffInMinutes","Math","floor","hoursDiff","getHours","getMinutes","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","NgxResourceCalendarModule","NgModule","declarations","imports","CommonModule","exports","DayModel","EventModel","HourModel","ResourceModel","SlotModel"],"mappings":"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","sourcesContent":["import { Component, TemplateRef, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\nimport { EventModel } from './models/event.model';\nimport { DayModel } from './models/day.model';\nimport { HourModel } from './models/hour.model';\n\n@Component({\n  selector: 'pro-resource-calendar',\n  template: `\n<div class=\"header\">\n  <div class=\"hour-row info-block\">\n    <ng-template\n      [ngTemplateOutlet]=\"infoTemplate || defaultInfoTemplate\"\n    ></ng-template>\n  </div>\n  <div class=\"day-row\" *ngFor=\"let date of datesWithEvents\">\n    <ng-template\n      [ngTemplateOutlet]=\"dayTemplate || defaultDayTemplate\"\n      [ngTemplateOutletContext]=\"{ day: date.data }\"\n    ></ng-template>\n    <div class=\"resources\">\n      <div\n        class=\"resource\"\n        [style.max-width.%]=\"100 / date.resources.length\"\n        *ngFor=\"let resource of date.resources\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"resourceTemplate || defaultResourceTemplate\"\n          [ngTemplateOutletContext]=\"{ resource: resource.data }\"\n        ></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"calendar\">\n  <div class=\"hour-row\">\n    <div *ngFor=\"let hour of hours\">\n      <div class=\"hour-slot\">\n        <div\n          class=\"hour-sub-slot\"\n          [style.height.px]=\"height\"\n          *ngFor=\"let slot of hour.slots\"\n        >\n          <ng-template\n            [ngTemplateOutlet]=\"hourTemplate || defaultHourTemplate\"\n            [ngTemplateOutletContext]=\"{ slot: slot }\"\n          ></ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngFor=\"let date of datesWithEvents\" class=\"day-row resources\">\n    <ng-template\n      [ngTemplateOutlet]=\"currentTimeTemplate || defaultCurrentTimeTemplate\"\n      [ngTemplateOutletContext]=\"{ day: date.data }\"\n    ></ng-template>\n    <div\n      class=\"resource\"\n      [style.max-width.%]=\"100 / date.resources.length\"\n      *ngFor=\"let resource of date.resources\"\n    >\n      <div\n        *ngFor=\"let event of resource.events\"\n        [style.top.px]=\"event.position\"\n        [style.height.px]=\"event.height\"\n        class=\"event\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"eventTemplate || defaultEventTemplate\"\n          [ngTemplateOutletContext]=\"{ event: event.data, resource: resource.data, day: date.data }\"\n        ></ng-template>\n      </div>\n\n      <div class=\"hour-slot\" *ngFor=\"let hour of resource.hours\">\n        <div\n          class=\"hour-sub-slot\"\n          [style.height.px]=\"height\"\n          *ngFor=\"let slot of hour.slots\"\n        >\n          <ng-template\n            [ngTemplateOutlet]=\"slotTemplate || defaultSlotTemplate\"\n            [ngTemplateOutletContext]=\"{\n              slot: slot,\n              resource: resource.data,\n              day: date.data\n            }\"\n          ></ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultInfoTemplate></ng-template>\n<ng-template #defaultDayTemplate let-day=\"day\">{{ day.day | date: 'shortDate' }}</ng-template>\n<ng-template #defaultResourceTemplate let-resource=\"resource\">{{\n  resource.resourceNumber\n}}</ng-template>\n<ng-template #defaultHourTemplate let-slot=\"slot\">{{ slot.time | date: 'shortTime' }}</ng-template>\n<ng-template #defaultCurrentTimeTemplate let-day=\"day\"></ng-template>\n<ng-template #defaultEventTemplate let-event=\"event\">{{\n  event.resourceNumber\n}}</ng-template>\n<ng-template #defaultSlotTemplate let-slot=\"slot\">{{ slot.time | date: 'shortTime' }}</ng-template>\n  `,\n  styles: [`\n.header {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch flex-start;\n  align-items: stretch;\n}\n\n.calendar {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch flex-start;\n  align-items: stretch;\n}\n\n.resources {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch flex-start;\n  align-items: stretch;\n}\n\n.resource {\n  flex: 1 1 100%;\n  position: relative;\n  box-sizing: border-box;\n}\n\n.hour-sub-slot {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.hour-row {\n  width: 10%;\n  min-width: 50px;\n}\n\n.day-row {\n  position: relative;\n  width: 90%;\n}\n\n.event {\n  position: absolute;\n  z-index: 1;\n  width: 100%;\n  overflow: hidden;\n}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ResourceCalendarComponent implements OnChanges {\n  /**\n   * An array of dates to show on view.\n   * NOTE: Hours are drawn from the arrays first day's first resource.\n   */\n  @Input() dates: DayModel[] = [];\n\n  /**\n   * An array of events to show on view.\n   */\n  @Input() events: EventModel[] = [];\n\n  /**\n   * How long is one slot duration in minutes.\n   */\n  @Input() slotDurationInMinutes = 15;\n\n  /**\n   * Height of one slot in pixels.\n   */\n  @Input() height = 60;\n\n  /**\n   * If every hour contains border or margin etc. This value needs to be that height in pixels.\n   */\n  @Input() hourBorderHeight = 1;\n\n  /**\n   * A custom template to use for the header empty space top of hours.\n   */\n  @Input() infoTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view in header.\n   */\n  @Input() dayTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view resource in header (below day template).\n   */\n  @Input() resourceTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for hour view (left to calendar).\n   */\n  @Input() hourTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for events.\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for slots.\n   */\n  @Input() slotTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to show current time etc. custom overlay.\n   */\n  @Input() currentTimeTemplate: TemplateRef<any>;\n\n\n  /**\n   * Hours for the calendar\n   */\n  public hours: HourModel[] = [];\n\n  /**\n   * Dates with events in resources\n   */\n  public datesWithEvents: any[] = [];\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.dates && changes.dates.currentValue) {\n      const dates = changes.dates.currentValue;\n      if (dates.length === 0) {\n        this.hours = [];\n      } else {\n        this.hours = dates[0].resources[0].hours;\n      }\n      this.setResourceEvents();\n    } else if (changes.events && changes.events.currentValue) {\n      this.setResourceEvents();\n    }\n  }\n\n  private setResourceEvents() {\n    if (this.dates && this.dates.length > 0) {\n      this.datesWithEvents = [];\n      this.dates.forEach(d => {\n        const resources = [];\n\n        d.resources.forEach(r => {\n          resources.push({\n            data: r,\n            hours: r.hours,\n            events: this.getEvents(r.resourceNumber, r.hours[0].slots[0].time)\n          });\n        });\n\n        this.datesWithEvents.push({\n          data: d,\n          resources\n        });\n      });\n    }\n  }\n\n  /**\n   * Gets events for a day's resource\n   */\n  private getEvents(\n    resourceNumber: number | string,\n    day: Date\n  ): any[] {\n    if (!this.events || this.events.length === 0) {\n      return [];\n    }\n\n    const endDate = new Date(day);\n    endDate.setDate(endDate.getDate() + 1);\n\n    const dayStart = day.getTime();\n    const dayEnd = endDate.getTime();\n\n    const events = this.events.filter(\n      m =>\n        m.resourceNumber === resourceNumber &&\n        m.startTime.getTime() >= dayStart &&\n        m.endTime.getTime() < dayEnd\n    );\n\n    // Calculate postion and height for events\n    return events.map(event => {\n      return {\n        data: event,\n        position: this.calculatePosition(event, day),\n        height: this.calculateHeight(event)\n      };\n    });\n  }\n\n  /**\n   * Calculates events top position. Floors to closest minute.\n   *\n   * @param event Event\n   */\n  private calculatePosition(event: EventModel, day: Date): number {\n    const diffInMinutes =\n      (event.startTime.getTime() -\n        day.getTime()) / 1000 / 60;\n\n    return (\n      Math.floor(diffInMinutes / this.slotDurationInMinutes) * this.height +\n      Math.floor(diffInMinutes / 60) * this.hourBorderHeight\n    );\n  }\n\n  /**\n   * Calculates events height. Floors to nearest minute.\n   *\n   * @param event Event\n   */\n  private calculateHeight(event: EventModel): number {\n    const diffInMinutes =\n      (event.endTime.getTime() - event.startTime.getTime()) / 1000 / 60;\n\n    if (diffInMinutes <= 0) {\n      return 1 * this.height;\n    }\n\n    let hoursDiff = event.endTime.getHours() - event.startTime.getHours();\n\n    // If end time ends with 0 minutes like 16:00, don't add hour diff as it ends in 15:xx - 16:00 slot\n    if (event.endTime.getMinutes() === 0 && hoursDiff > 0) {\n      hoursDiff--;\n    }\n\n    return (\n      (diffInMinutes / this.slotDurationInMinutes) * this.height +\n      hoursDiff * this.hourBorderHeight\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResourceCalendarComponent } from './resource-calendar.component';\n\n@NgModule({\n  declarations: [ResourceCalendarComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ResourceCalendarComponent]\n})\nexport class NgxResourceCalendarModule { }\n","import { ResourceModel } from './resource.model';\r\n\r\nexport class DayModel {\r\n  day: Date;\r\n  resources: ResourceModel[];\r\n}\r\n","export class EventModel {\r\n  startTime: Date;\r\n  endTime: Date;\r\n  resourceNumber: number | string;\r\n}\r\n","import { SlotModel } from './slot.model';\r\n\r\nexport class HourModel {\r\n  slots: SlotModel[];\r\n}\r\n","import { HourModel } from './hour.model';\r\n\r\nexport class ResourceModel {\r\n  resourceNumber: number | string;\r\n  hours: HourModel[];\r\n}\r\n","export class SlotModel {\r\n  time: Date;\r\n}\r\n"]}