{"version":3,"file":"protacon-ngx-resource-calendar.js","sources":["ng://@protacon/ngx-resource-calendar/lib/resource-calendar.component.ts","ng://@protacon/ngx-resource-calendar/lib/ngx-resource-calendar.module.ts","ng://@protacon/ngx-resource-calendar/lib/models/day.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/event.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/hour.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/resource.model.ts","ng://@protacon/ngx-resource-calendar/lib/models/slot.model.ts"],"sourcesContent":["import { Component, TemplateRef, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\nimport { EventModel } from './models/event.model';\nimport { DayModel } from './models/day.model';\nimport { HourModel } from './models/hour.model';\n\n@Component({\n  selector: 'pro-resource-calendar',\n  template: `\n<div class=\"header\">\n  <div class=\"hour-row info-block\">\n    <ng-template\n      [ngTemplateOutlet]=\"infoTemplate || defaultInfoTemplate\"\n    ></ng-template>\n  </div>\n  <div class=\"day-row\" *ngFor=\"let date of datesWithEvents\">\n    <ng-template\n      [ngTemplateOutlet]=\"dayTemplate || defaultDayTemplate\"\n      [ngTemplateOutletContext]=\"{ day: date.data }\"\n    ></ng-template>\n    <div class=\"resources\">\n      <div\n        class=\"resource\"\n        [style.max-width.%]=\"100 / date.resources.length\"\n        *ngFor=\"let resource of date.resources\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"resourceTemplate || defaultResourceTemplate\"\n          [ngTemplateOutletContext]=\"{ resource: resource.data }\"\n        ></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"calendar\">\n  <div class=\"hour-row\">\n    <div *ngFor=\"let hour of hours\">\n      <div class=\"hour-slot\">\n        <div\n          class=\"hour-sub-slot\"\n          [style.height.px]=\"height\"\n          *ngFor=\"let slot of hour.slots\"\n        >\n          <ng-template\n            [ngTemplateOutlet]=\"hourTemplate || defaultHourTemplate\"\n            [ngTemplateOutletContext]=\"{ slot: slot }\"\n          ></ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngFor=\"let date of datesWithEvents\" class=\"day-row resources\">\n    <ng-template\n      [ngTemplateOutlet]=\"currentTimeTemplate || defaultCurrentTimeTemplate\"\n      [ngTemplateOutletContext]=\"{ day: date.data }\"\n    ></ng-template>\n    <div\n      class=\"resource\"\n      [style.max-width.%]=\"100 / date.resources.length\"\n      *ngFor=\"let resource of date.resources\"\n    >\n      <div\n        *ngFor=\"let event of resource.events\"\n        [style.top.px]=\"event.position\"\n        [style.height.px]=\"event.height\"\n        class=\"event\"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"eventTemplate || defaultEventTemplate\"\n          [ngTemplateOutletContext]=\"{ event: event.data, resource: resource.data, day: date.data }\"\n        ></ng-template>\n      </div>\n\n      <div class=\"hour-slot\" *ngFor=\"let hour of resource.hours\">\n        <div\n          class=\"hour-sub-slot\"\n          [style.height.px]=\"height\"\n          *ngFor=\"let slot of hour.slots\"\n        >\n          <ng-template\n            [ngTemplateOutlet]=\"slotTemplate || defaultSlotTemplate\"\n            [ngTemplateOutletContext]=\"{\n              slot: slot,\n              resource: resource.data,\n              day: date.data\n            }\"\n          ></ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultInfoTemplate></ng-template>\n<ng-template #defaultDayTemplate let-day=\"day\">{{ day.day | date: 'shortDate' }}</ng-template>\n<ng-template #defaultResourceTemplate let-resource=\"resource\">{{\n  resource.resourceNumber\n}}</ng-template>\n<ng-template #defaultHourTemplate let-slot=\"slot\">{{ slot.time | date: 'shortTime' }}</ng-template>\n<ng-template #defaultCurrentTimeTemplate let-day=\"day\"></ng-template>\n<ng-template #defaultEventTemplate let-event=\"event\">{{\n  event.resourceNumber\n}}</ng-template>\n<ng-template #defaultSlotTemplate let-slot=\"slot\">{{ slot.time | date: 'shortTime' }}</ng-template>\n  `,\n  styles: [`\n.header {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch flex-start;\n  align-items: stretch;\n}\n\n.calendar {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch flex-start;\n  align-items: stretch;\n}\n\n.resources {\n  flex-direction: row;\n  box-sizing: border-box;\n  display: flex;\n  place-content: stretch flex-start;\n  align-items: stretch;\n}\n\n.resource {\n  flex: 1 1 100%;\n  position: relative;\n  box-sizing: border-box;\n}\n\n.hour-sub-slot {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.hour-row {\n  width: 10%;\n  min-width: 50px;\n}\n\n.day-row {\n  position: relative;\n  width: 90%;\n}\n\n.event {\n  position: absolute;\n  z-index: 1;\n  width: 100%;\n  overflow: hidden;\n}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ResourceCalendarComponent implements OnChanges {\n  /**\n   * An array of dates to show on view.\n   * NOTE: Hours are drawn from the arrays first day's first resource.\n   */\n  @Input() dates: DayModel[] = [];\n\n  /**\n   * An array of events to show on view.\n   */\n  @Input() events: EventModel[] = [];\n\n  /**\n   * How long is one slot duration in minutes.\n   */\n  @Input() slotDurationInMinutes = 15;\n\n  /**\n   * Height of one slot in pixels.\n   */\n  @Input() height = 60;\n\n  /**\n   * If every hour contains border or margin etc. This value needs to be that height in pixels.\n   */\n  @Input() hourBorderHeight = 1;\n\n  /**\n   * A custom template to use for the header empty space top of hours.\n   */\n  @Input() infoTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view in header.\n   */\n  @Input() dayTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view resource in header (below day template).\n   */\n  @Input() resourceTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for hour view (left to calendar).\n   */\n  @Input() hourTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for events.\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for slots.\n   */\n  @Input() slotTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to show current time etc. custom overlay.\n   */\n  @Input() currentTimeTemplate: TemplateRef<any>;\n\n\n  /**\n   * Hours for the calendar\n   */\n  public hours: HourModel[] = [];\n\n  /**\n   * Dates with events in resources\n   */\n  public datesWithEvents: any[] = [];\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.dates && changes.dates.currentValue) {\n      const dates = changes.dates.currentValue;\n      if (dates.length === 0) {\n        this.hours = [];\n      } else {\n        this.hours = dates[0].resources[0].hours;\n      }\n      this.setResourceEvents();\n    } else if (changes.events && changes.events.currentValue) {\n      this.setResourceEvents();\n    }\n  }\n\n  private setResourceEvents() {\n    if (this.dates && this.dates.length > 0) {\n      this.datesWithEvents = [];\n      this.dates.forEach(d => {\n        const resources = [];\n\n        d.resources.forEach(r => {\n          resources.push({\n            data: r,\n            hours: r.hours,\n            events: this.getEvents(r.resourceNumber, r.hours[0].slots[0].time)\n          });\n        });\n\n        this.datesWithEvents.push({\n          data: d,\n          resources\n        });\n      });\n    }\n  }\n\n  /**\n   * Gets events for a day's resource\n   */\n  private getEvents(\n    resourceNumber: number | string,\n    day: Date\n  ): any[] {\n    if (!this.events || this.events.length === 0) {\n      return [];\n    }\n\n    const endDate = new Date(day);\n    endDate.setDate(endDate.getDate() + 1);\n\n    const dayStart = day.getTime();\n    const dayEnd = endDate.getTime();\n\n    const events = this.events.filter(\n      m =>\n        m.resourceNumber === resourceNumber &&\n        m.startTime.getTime() >= dayStart &&\n        m.endTime.getTime() < dayEnd\n    );\n\n    // Calculate postion and height for events\n    return events.map(event => {\n      return {\n        data: event,\n        position: this.calculatePosition(event, day),\n        height: this.calculateHeight(event)\n      };\n    });\n  }\n\n  /**\n   * Calculates events top position. Floors to closest minute.\n   *\n   * @param event Event\n   */\n  private calculatePosition(event: EventModel, day: Date): number {\n    const diffInMinutes =\n      (event.startTime.getTime() -\n        day.getTime()) / 1000 / 60;\n\n    return (\n      Math.floor(diffInMinutes / this.slotDurationInMinutes) * this.height +\n      Math.floor(diffInMinutes / 60) * this.hourBorderHeight\n    );\n  }\n\n  /**\n   * Calculates events height. Floors to nearest minute.\n   *\n   * @param event Event\n   */\n  private calculateHeight(event: EventModel): number {\n    const diffInMinutes =\n      (event.endTime.getTime() - event.startTime.getTime()) / 1000 / 60;\n\n    if (diffInMinutes <= 0) {\n      return 1 * this.height;\n    }\n\n    let hoursDiff = event.endTime.getHours() - event.startTime.getHours();\n\n    // If end time ends with 0 minutes like 16:00, don't add hour diff as it ends in 15:xx - 16:00 slot\n    if (event.endTime.getMinutes() === 0 && hoursDiff > 0) {\n      hoursDiff--;\n    }\n\n    return (\n      (diffInMinutes / this.slotDurationInMinutes) * this.height +\n      hoursDiff * this.hourBorderHeight\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResourceCalendarComponent } from './resource-calendar.component';\n\n@NgModule({\n  declarations: [ResourceCalendarComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ResourceCalendarComponent]\n})\nexport class NgxResourceCalendarModule { }\n","import { ResourceModel } from './resource.model';\r\n\r\nexport class DayModel {\r\n  day: Date;\r\n  resources: ResourceModel[];\r\n}\r\n","export class EventModel {\r\n  startTime: Date;\r\n  endTime: Date;\r\n  resourceNumber: number | string;\r\n}\r\n","import { SlotModel } from './slot.model';\r\n\r\nexport class HourModel {\r\n  slots: SlotModel[];\r\n}\r\n","import { HourModel } from './hour.model';\r\n\r\nexport class ResourceModel {\r\n  resourceNumber: number | string;\r\n  hours: HourModel[];\r\n}\r\n","export class SlotModel {\r\n  time: Date;\r\n}\r\n"],"names":[],"mappings":"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"}